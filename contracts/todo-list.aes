@compiler >= 4.2

contract ToDoList =

  datatype status = NoStatus | InProgress | ReadyForReview | ToBeDeployed | Finished

  record task =
    { name : string
    , completed : bool
    , status : status}

  type tasks = map(int, task)

  record state =
    { seq_id : int
    , tasks : tasks }

  entrypoint init() : state =
    { seq_id = 0, tasks = {}}

  stateful entrypoint add_task(task_name : string) =
    let next_seq_id = state.seq_id + 1
    let new_task_record = { name = task_name, completed = false, status = NoStatus }
    put(state{ tasks[state.seq_id] = new_task_record, seq_id = next_seq_id })

  stateful entrypoint set_task_completed(seq_id : int) =
    put(state{ tasks[seq_id].status = Finished })
    put(state{ tasks[seq_id].completed = true })

  stateful entrypoint set_next_status(seq_id : int) =
    require(!state.tasks[seq_id].completed, "ALREADY_COMPLETED")
    let next_status = next_status(state.tasks[seq_id].status)
    put(state{ tasks[seq_id].status = next_status })
    put(state{ tasks[seq_id].completed = is_completed(next_status) })

  entrypoint get_tasks() : tasks =
    state.tasks

  function
    is_completed : status => bool
    is_completed(Finished) = true
    is_completed(_) = false

  function
    next_status : status => status
    next_status(NoStatus) = InProgress
    next_status(InProgress) = ReadyForReview
    next_status(ReadyForReview) = ToBeDeployed
    next_status(ToBeDeployed) = Finished
    next_status(Finished) = abort("ALREADY_COMPLETED")
